import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.57.4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { report_id } = await req.json();
    
    if (!report_id) {
      throw new Error('report_id is required');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const lovableApiKey = Deno.env.get('LOVABLE_API_KEY');
    
    if (!lovableApiKey) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Fetch report data
    const { data: report, error: fetchError } = await supabase
      .from('reports')
      .select('extracted_company_name, industry, report_data, domain')
      .eq('id', report_id)
      .single();

    if (fetchError || !report) {
      console.error('Failed to fetch report:', fetchError);
      throw new Error('Report not found');
    }

    const { extracted_company_name, industry, report_data, domain } = report;

    if (!extracted_company_name || !industry) {
      console.log('Skipping generation: missing company name or industry');
      return new Response(
        JSON.stringify({ success: false, message: 'Missing required data' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const organicTraffic = report_data?.organicTraffic || 0;
    const missedLeads = report_data?.missedLeads || 0;
    const yearlyRevenueLost = report_data?.yearlyRevenueLost || 0;
    const avgTransactionValue = report_data?.avgTransactionValue || 0;

    // Format industry name
    const industryName = industry.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());

    // Build AI prompt
    const prompt = `You are a B2B SaaS copywriter specializing in identity resolution. Write 2-3 specific, actionable scenarios showing how ${extracted_company_name}, a ${industryName} business with ${organicTraffic.toLocaleString()} monthly visitors, can use identity resolution to convert anonymous visitors into customers and increase revenue.

Context:
- Company: ${extracted_company_name}
- Industry: ${industryName}
- Monthly Traffic: ${organicTraffic.toLocaleString()}
- Missed Leads/Month: ${missedLeads.toLocaleString()}
- Avg Transaction Value: $${avgTransactionValue.toLocaleString()}
- Yearly Revenue Lost: $${yearlyRevenueLost.toLocaleString()}

Each scenario must:
- Use the actual company name "${extracted_company_name}" (not "your company")
- Be specific to the ${industryName} industry with concrete examples
- Include realistic dollar amounts based on their $${avgTransactionValue} sale value
- Address their specific pain point: ${missedLeads.toLocaleString()} visitors leave without identifying themselves every month
- Be written in second person ("your team can..." or "you can...")
- Be 3-4 sentences each
- Total length: 250-350 words
- Conversational, confident tone
- Focus on practical implementation and ROI

Do not include section headers, bullet points, or intro/outro text. Output only the 2-3 scenarios as plain paragraphs separated by double line breaks.`;

    console.log('Generating use cases for:', extracted_company_name);

    // Call Lovable AI
    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lovableApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          {
            role: 'system',
            content: 'You are an expert B2B SaaS copywriter specializing in identity resolution and lead generation. Write compelling, specific use cases that demonstrate clear ROI and practical implementation steps.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.8,
        max_tokens: 800
      }),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI API error:', aiResponse.status, errorText);
      throw new Error(`AI generation failed: ${aiResponse.status}`);
    }

    const aiData = await aiResponse.json();
    const generatedText = aiData.choices?.[0]?.message?.content;

    if (!generatedText) {
      throw new Error('No content generated by AI');
    }

    console.log('Generated use cases length:', generatedText.length);

    // Save to database
    const { error: updateError } = await supabase
      .from('reports')
      .update({
        personalized_use_cases: generatedText,
        use_cases_approved: true,
        use_cases_generated_at: new Date().toISOString()
      })
      .eq('id', report_id);

    if (updateError) {
      console.error('Failed to save use cases:', updateError);
      throw updateError;
    }

    console.log('âœ… Use cases generated and saved for:', domain);

    return new Response(
      JSON.stringify({ 
        success: true, 
        text: generatedText,
        word_count: generatedText.split(/\s+/).length
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-use-cases:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});
